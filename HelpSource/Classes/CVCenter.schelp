CLASS:: CVCenter
summary:: CVCenter is a collection of CVs and provides a GUI for easy use in connection with external hard- and software like MIDI- and OSC-controllers.
categories:: GUI, CV, MIDI, OSC
related:: Classes/CVWidget, Classes/CVWidgetKnob, Classes/CVWidget2D, Classes/CV, Classes/CCResponder, Classes/OSCresponderNode

DESCRIPTION::
CVCenter lets you collect an arbitrary number of link::Classes/CV::s (you need to have the Conductor-quark installed) and use them to easily create control-widgets for link::Classes/Synth::s, link::Classes/Ndef::s or link::Classes/Pattern::-keys. Or even more basically: any value that can be set at runtime. For each link::Classes/CV:: a widget will be created within the main CVCenter-GUI that combines an arbitrary number of link::Classes/TabbedView::s, filled with your widgets.

strong:: What's a CV? ::

A link::Classes/CV:: models a value constrained by a link::Classes/ControlSpec::. The value can be a single link::Classes/Float:: or an array of Floats. Whenever the link::Classes/CV::'s value changes, it sends a changed message labeled 'synch'.  This way dependants (such as GUI objects or server value) can be updated with link::Classes/SimpleController::s. 
A link::Classes/CV::'s value can be read with the 'value' message. 

CLASSMETHODS::

METHOD:: all

returns:: an IdentityDictionary, containing all CVs added to CVCenter

METHOD:: cvWidgets
all widgets (currently either CVWidgetKnobs or CVWidget2Ds) displayed within the main GUI of CVCenter

returns:: an IdentityDictionary, containing all CVWidgets

METHOD:: window
The main window of CVCenter

returns:: an instance of Window

METHOD:: tabs
A TabbedView, containing the widgets

returns:: a TabbedView

METHOD:: midiMode
Different MIDI-devices may have different output modes: either values from 0-127 or an in-/decremental value (e.g. -1 or +1). These modes may be taken in account as follows:

table::
## code::0:: || the device outputs a values 0-127
## code::1:: || the device outputs in-/decremental values
::

code::midiMode:: can be set at runtime and will be reflected in all widgets, i.e. all currently connectected devices will be switched to the new mode immediately.

default: code::0::

returns:: this

METHOD:: midiResolution
When code::midiMode:: has been set to 1, this method allows to set the resolution (= stepsize) of the connected hardware MIDI-sliders. 

standard-value: 1
lower values -> higher resolution (lower stepsize)
higher values -> lower resolution (bigger stepsize)

default: code::1::

returns:: this

METHOD:: ctrlButtonBank
Some MIDI-devices provide several banks of sliders. I.e. a device may be equipped with 16 sliders and 4 banks that can be switched. So, slider 1 in bank 2 is slider nr. 17, slider 3 in bank 3 is slider nr. 35. By default these sliders would have to be addressed in a link::Classes/CCResponder:: as 16 (slider 17) and 34 (slider 35) which makes it hard to immediately get the right slider from what is displayed within the GUI. 
code::ctrlButtonBank:: translates the hardware-layout in a way that makes it easy to see the slider's bank and number: slider 17 becomes 2:1 (bank 2,  nr. 1).

default: code::nil::

returns:: this

METHOD:: midiMean
Devices which output a in-/decremtal may output a standard value + in-/decrement. code::midiMean:: gets automatically subtracted from this value, so in-/decrement remains.

default: code::64::

returns:: this

METHOD:: softWithin
If code::midiMode:: has been set to code::0:: moving a widget-slider will set the CV to a new value. However, if a MIDI-slider is connected to that widget, moving the MIDI-slider will set the CV's value immediatly to the value that is stored in the MIDI-slider i.e. a "jump" will happen. code::softWithin:: will ease this behavior by setting the CV's value only if the slider gets within code::softWithin/2::

default: code::0.1::

returns:: this

METHOD:: guix
The x-position at which the GUI will be created - has no direct effect besides when being set ahead from initializing CVCenter.

returns:: this

METHOD:: guiy
The y-position at which the GUI will be created - has no direct effect besides when being set ahead from initializing CVCenter.

returns:: this

METHOD:: guiwidth
The GUI-width - has no direct effect besides when being set ahead from initializing CVCenter.

returns:: this

METHOD:: guiheight
The GUI-height - has no direct effect besides when being set ahead from initializing CVCenter.

returns:: this

METHOD:: new
Initializes CVCenter by creating its classvars code::all::, code::cvWidgets:: and more private ones.

note::It shouldn't be necessary to initialize CVCenter with an explicit call to strong::*new::. Rather use strong::*use:: whenever possible as (will call strong::*new:: internally) ::

argument:: cvs
an Array, a Dictionary or an Event, containing the widget name(s) and its/their internal CV(s):

argument:: … setUpArgs
An arbitrary number of key/value pairs. The following keys are currently supported:
definitionList::
list::
## strong::midiMode::
table::
## code::0:: || MIDI-controllers that yield values from 0-127
## code::1:: || MIDI-controller that yield de-/incremental values
::
## strong::midiResolution:: || - only applies when midiMode is set to code::1:: - default: 1
## strong::midiMean:: || - only applies when midiMode is set to code::1:: - default: 64
## strong::softwithin:: || - only applies when midiMode is set to code::0:: - default: 0.1
## strong::ctrlButtonBank:: || - default: nil
::
::
::

For a detailed description of the above listet arguments see the descriptions of the according classvar-methods. 

returns:: this

METHOD:: gui
Creates and fronts the CVCenter GUI if it's closed or nil. Sends the GUI to front if it's in the background. If CVs are passed in as key/value pairs it adds them as widgets to the GUI under the given tab if given or the one that's currently in front.

argument:: tab
a String or a Symbol, indicating the label of a tab. If none is provided the widgets will be added to "default" or any other tab that's currently in front. If an event containing the keys code::\hi:: and code::\hi:: gets passed in the widget will be a CVWidget2D.

argument::  ... cvs
key/value pairs: code::\wdgtName1, a CV, \wdgtName2, (lo: a CV, hi: a CV), … \wdgtNameN, a CV::

returns:: this

METHOD:: put
Put new CVs into CVCenter.all

argument::  ... args
key/value pairs: code::\wdgtName1, a CV, \wdgtName2, (lo: a CV, hi: a CV), … \wdgtNameN, a CV::
If the number of arguments is odd and the last one is a code::Boolean:: this will indicate wether already contained values will be overwritten (default: code::false::)

returns:: this

METHOD:: removeAt
Remove a given widget including its CV(s).

argument:: key
a code::Symbol:: or code::String::

returns:: this

METHOD:: removeAll
Remove given widgets including their CVs or all.

argument::  ... keys
widget-keys, given as code::String::s or code::Symbol::s. If no keys are given strong::all:: widgets will be removed. 

returns:: this

METHOD:: at
Return the CV at the given key

argument:: key
a code::Symbol:: or a code::String::

returns:: this

METHOD:: use
Use an arbitrary name for creating a new CVWidget (a CVWidgetKnob or a CVWidget2D, depending on the argument code::slot::).

note::This is the recommended way for creating new widgets.::

This method should be convenient in most situations. It simply creates a new code::CVWidget:: and returns the code::CV::. As code::CV:: inherits from code::Stream:: this method may directly be used in code::Pattern::s. Any reevaluation will leave a once created code::CV:: untouched.

argument:: key
a code::Symbol:: or a code::String:: - the resulting code::CV:: will be put into code::CVCenter.all:: under this name and the widget will be labeled the same.

argument:: spec
a code::ControlSpec:: - default: code::ControlSpec.new::

argument:: value
a default value for the code::CV:: - default: the code::ControlSpec::'s default value

argument:: tab
a code::String:: or a code::Symbol:: - the tab under which the widget will appear. If not provided the widget will be added under the tab that's currently in front.

argument:: slot
only needed if a code::CVWidget2D:: shall be created. Either code::\lo:: or code::\hi::

returns:: a CV

METHOD:: setup
returns the current setup:
list::
## code::midiMode::
## code::midiResolution::
## code::midiMean::
## code::ctrlButtonBank::
## code::softWithin::

returns:: an code::Event::

METHOD:: guiMoveTo
Moves the GUI to a given position on screen.

argument:: point
a code::Point::

returns:: this

METHOD:: guiChangeDimensions
Sets the GUI's dimension to the given value.

argument:: point
a code::Point::

returns:: this

METHOD:: renameTab
Set a tab-name from code::oldName:: to code::newName::

argument:: oldName
a code::String:: or a code::Symbol::

argument:: newName
a code::String:: or a code::Symbol::

returns:: this

METHOD:: addActionAt
Add an action to a widget's CV given in code::key:: under the name code::name:: 

argument:: key
a code::Symbol:: or code::String:: - representing a CVWidget resp. its CVs

argument:: name
a code::Symbol:: or a code::String:: - the name under which the action will be added. The action may be removed or deactivated again by referring to this name.

argument:: action
a code::Function:: or a code::String:: - if one or more arguments are added, the first will automatically be a representation of the CV. The function can also be provided as a string that compiles to a function when you call code::interpret:: on it.

argument:: slot
a code::String:: or code::Symbol:: - either code::\hi:: or code::\lo::. Only needed if the widget is a code::CVWidget2D:::

argument:: active
a code::Boolean:: - activate or deactivate the action. default: code::true::

returns:: this

METHOD:: removeActionAt
(describe method here)

argument:: key
(describe argument here)

argument:: name
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: activateActionAt
(describe method here)

argument:: key
(describe argument here)

argument:: name
(describe argument here)

argument:: activate
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: widgetsAtTab
(describe method here)

argument:: tab
(describe argument here)

returns:: (returnvalue)

METHOD:: saveSetup
(describe method here)

argument:: path
(describe argument here)

returns:: (returnvalue)

METHOD:: loadSetup
(describe method here)

argument:: path
(describe argument here)

argument:: addToExisting
(describe argument here)

argument:: autoConnectOSC
(describe argument here)

argument:: autoConnectMIDI
(describe argument here)

argument:: loadActions
(describe argument here)

returns:: (returnvalue)

METHOD:: prSetup
(describe method here)

argument:: setupDict
(describe argument here)

returns:: (returnvalue)

METHOD:: prAddToGui
(describe method here)

argument:: tab
(describe argument here)

argument:: widget2DKey
(describe argument here)

returns:: (returnvalue)

METHOD:: prRegroupWidgets
(describe method here)

argument:: tabIndex
(describe argument here)

returns:: (returnvalue)

METHOD:: prRemoveTab
(describe method here)

argument:: index
(describe argument here)

returns:: (returnvalue)

METHOD:: finishGui
(describe method here)

argument:: obj
(describe argument here)

argument:: ctrlName
(describe argument here)

argument:: environment
(describe argument here)

argument:: more
(describe argument here)

returns:: (returnvalue)


INSTANCEMETHODS::

EXAMPLES::

code::
(some example code)
::
