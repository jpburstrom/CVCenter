CLASS:: CVWidget
summary:: The abstract superclass for all CVWidgets
categories:: GUI, CV, MIDI, OSC
related:: Classes/CVCenter, Classes/CV, Classes/CVWidgetKnob, Classes/CVWidget2D, Classes/CV, Classes/CCResponder, Classes/OSCresponderNode

DESCRIPTION::
CVWidget is the superclass for all CVWidgets (currently: code::CVWidgetKnob:: and code::CVWidget2D::). However, it implements a couple of useful methods that are common to all its subclasses.


CLASSMETHODS::


INSTANCEMETHODS::

METHOD:: setMidiMode
Different MIDI-devices may have different output modes: either values from 0-127 or an in-/decremental value (e.g. -1 or +1). These modes may be taken in account as follows:

table::
## code::0:: || the device outputs a values 0-127
## code::1:: || the device outputs in-/decremental values
::

argument:: mode
an code::Integer::

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getMidiMode
Get the current midiMode (0 or 1).

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: an code::Integer::

METHOD:: setMidiMean
Devices which output a in-/decremtal may output a standard value + in-/decrement. code::midiMean:: gets automatically subtracted from this value, so in-/decrement remains. Applies only if midiMode is set to code::1::.

argument:: meanval
an code::Integer::. default: code::64::

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getMidiMean
Get the current midiMean value.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: an code::Integer::

METHOD:: setSoftWithin
If code::midiMode:: has been set to code::0:: moving a widget-slider will set the CV to a new value. However, if a MIDI-slider is connected to that widget, moving the MIDI-slider will set the CV's value immediatly to the value that is stored in the MIDI-slider i.e. a "jump" will happen. code::softWithin:: will ease this behavior by setting the CV's value only if the slider gets within code::softWithin/2::. Applies only if midiMode is set to code::0::.

argument:: threshold
a code::Float:: - default: code::0.1::.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getSoftWithin
Get the current softWithin value.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: a code::Float::

METHOD:: setCtrlButtonBank
Some MIDI-devices provide several banks of sliders. I.e. a device may be equipped with 16 sliders and 4 banks that can be switched. So, slider 1 in bank 2 is slider nr. 17, slider 3 in bank 3 is slider nr. 35. By default these sliders would have to be addressed in a link::Classes/CCResponder:: as 16 (slider 17) and 34 (slider 35) which makes it hard to immediately get the right slider from what is displayed within the GUI. 
code::ctrlButtonBank:: translates the hardware-layout in a way that makes it easy to see the slider's bank and number: slider 17 becomes 2:1 (bank 2,  nr. 1).

argument:: numSliders
an code::Integer::, representing the number of sliders in one bank.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: code::nil:: or an code::Integer::

METHOD:: getCtrlButtonBank
Get the current ctrlButtonBank value

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: an code::Integer::, representing the number of sliders in one bank.

METHOD:: setMidiResolution
If code::midiMode:: has been set to 1 (by calling setMidiMode), this method allows to set the resolution (= stepsize) of the connected hardware MIDI-sliders. 

argument:: resolution
a code::Float::, representing the stepsize:
lower values -> higher resolution 
higher values -> lower resolution

default: code::1::

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getMidiResolution
Get the current value midiResolution value.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns::  a code::float::

METHOD:: setCalibrate
Unlike MIDI the range of incoming values isn't 0-127 - it is unknown at the time of initialization of the OSC-responder. All CVWidgets have an inbuilt calibration mechanism that determines the range automatically. At initialization the range is set to [0.0001, 0.0001]. If the mechanism detects a value that is lower or higher than the values set at initialization it will set the constraints accordingly. This method allows to stop or start the calibration-process.

argument:: bool
a code::Boolean::, indicating wether the calibration-process shall be started or stopped.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getCalibrate
Get the current calibration-status

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: a code::Boolean::

METHOD:: setSpec
Every CVWidget wraps one or more code::CV::s whose internal spec can be set with this method.

argument:: spec
can either be:
- a code::ControlSpec::
- an code::Array:: that can be converted to a valid ControlSpec by calling code::asSpec:: on it
- a code::Symbol:: representing the name of a valid ControlSpec (e.g. code::\freq::)

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getSpec
Get the current spec of the widget's code::CV::.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: a code::ControlSpec::

METHOD:: setOscMapping
Within an code::OSCresponder::'s function values coming in are being mapped to the code::ControlSpec::'s range, defined by its code::minval:: and code::maxval::. Furthermore a spec may implement a non-linear code::warp:: for the transition from code::minval:: to code::maxval::. Especially when work with accelerometers and orientation-sensors setting oscMapping to some non-linear mode will allow a much more fine-grained control.

argument:: mapping
a code::Symbol:: - can be:
- code::\linlin:: - linear to linear mapping
- code::\linexp:: - linear to exponential mapping
- code::\explin:: - exponential to linear mapping
- code::\expexp:: - exponential to exponential mapping

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getOscMapping
Get the current oscMapping-mode

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns::  a code::Symbol::, indicating the oscMapping-mode

METHOD:: oscConnect
Connect a widget to an OSC-device resp. a program that sends OSC-messages to SuperCollider

argument:: ip
optional - if set the code::OSCresponder:: will only listen to messages coming from that IP-address.

argument:: port
optional - if set the code::OSCresponder:: will only listen to messages coming from that port.

argument:: name
a code::String:: or a code::Symbol::: The OSC-command-name to which the OSCresponder will listen. E.g. code::'/touch/x':: or code::'/accelerometer/x'::. Every widget has an inbuilt mechanism that allows the user to scan connected devices for possible command-names. This mechanism is implemented the class code::OSCCommands:: which cannot only be used in connection with CVWidgets. code::OSCCommands:: stores a list of devices and commands to disk so the user does not have to rescan every time (s)he restarts SC.

argument:: oscMsgIndex
messages you receive from an OSC-device/-program usually consist of the commend-name and one or more slots, containing numerical values. An orientation-sensor might e.g. send a message like the following:

code:: '/orientation', 178, 67, 78::

the first slot is the command-name and the subsequent slots are code::x::, code::y:: and code::z::. code::oscMsgIndex:: allows you to select which of those three values you want to use in your widget.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: oscDisconnect
Disconnects the OSC-device/-application reps. removes the code::OSCresponder::

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: midiConnect
Connect a widget to a MIDI-device utilizing a code::CCResponder::.

argument:: uid
optional - the ID under which the device gets registered in SuperCollider

argument:: chan
optional - the MIDI-channel to which the program will listen

argument:: num
optional - the controller-number to which the program will listen

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: midiDisconnect
Terminate a MIDi-connection reps. remove the code::CCResponder::.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: setOscInputConstraints
Any widget has a mechanism built in that supposed to detect the constraints of the values coming in via OSC. However, you my set these constraints manually as well with this method.

argument:: constraintsHiLo
a code::Point:: - e.g. code::Point(-20, 20):: or code::0@360::

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: getOscInputConstraints
Get the current oscInputConstraints. This will return code::nil:: as the widget is not connected and the calibration-mechanism hasn't set any values.

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: code::nil:: or an code::Event:: containing the constraints in the keys code::\lo:: and code::\hi:: (not related to the \lo and \hi keys in a code::CVWidget2D::)

METHOD:: addAction
Add an action to the widget's code::CV::. 

argument:: name
a code::Symbol:: or a code::String::, representing the name under which the action will be stored

argument:: action
a code::Function:: or a code::String:: that compiles to one if code::interpret:: is called on it. If the function contains an argument the code::CV:: will be provided in this argument:
code::{ |cv| "the CV's current value is %\n".postf(cv.value) }::

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

argument:: active
a code::Boolean::, indicating wether the action shall become active immediatly

returns:: this (a CVWidget)

METHOD:: removeAction
Remove an action given by its name

argument:: name
a code::Symbol:: or a code::String::, representing the action's name

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: activateAction
Activate or deactivate a stored action

argument:: name
a code::Symbol:: or a code::String::, representing the action's name

argument:: activate
a code::Boolean::, indicating wether the action shall be activated or deactivated

argument:: slot
only needed if the widget is a code::CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: this (a CVWidget)

METHOD:: widgetCV
(describe method here)

returns:: (returnvalue)

METHOD:: wdgtActions
(describe method here)

returns:: (returnvalue)

METHOD:: alwaysPositive
(describe method here)

returns:: (returnvalue)

subsection:: GUI properties and methods

METHOD:: front
(describe method here)

returns:: (returnvalue)

METHOD:: allGuiEls
(describe method here)

returns:: (returnvalue)

METHOD:: bgColor
(describe method here)

returns:: (returnvalue)

METHOD:: widgetBg
(describe method here)

returns:: (returnvalue)

METHOD:: label
(describe method here)

returns:: (returnvalue)

METHOD:: nameField
(describe method here)

returns:: (returnvalue)

METHOD:: wdgtInfo
(describe method here)

returns:: (returnvalue)

METHOD:: visible
(describe method here)

argument:: visible
(describe argument here)

returns:: (returnvalue)

METHOD:: editor
(describe method here)

returns:: (returnvalue)

METHOD:: wdgtControllersAndModels
(describe method here)

returns:: (returnvalue)

METHOD:: midiOscEnv
(describe method here)

returns:: (returnvalue)

METHOD:: setup
(describe method here)

returns:: (returnvalue)

METHOD:: toggleComment
(describe method here)

argument:: visible
(describe argument here)

returns:: (returnvalue)

METHOD:: widgetXY
(describe method here)

argument:: point
(describe argument here)

returns:: (returnvalue)

METHOD:: widgetProps
(describe method here)

returns:: (returnvalue)

METHOD:: bounds
(describe method here)

returns:: (returnvalue)

METHOD:: remove
(describe method here)

returns:: (returnvalue)

METHOD:: close
(describe method here)

returns:: (returnvalue)

METHOD:: isClosed
(describe method here)

returns:: (returnvalue)

METHOD:: initControllersAndModels
(describe method here)

argument:: controllersAndModels
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: initControllerActions
(describe method here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitCalibration
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitSpecControl
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitMidiConnect
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitMidiDisplay
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitMidiOptions
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitOscConnect
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitOscDisplay
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitOscInputRange
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: prInitActionsControl
(describe method here)

argument:: wcm
(describe argument here)

argument:: thisGuiEnv
(describe argument here)

argument:: midiOscEnv
(describe argument here)

argument:: argWidgetCV
(describe argument here)

argument:: thisCalib
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)


EXAMPLES::

code::
(some example code)
::
