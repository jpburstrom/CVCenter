CLASS:: CVWidgetEditor
summary:: a GUI for editing widgets and their parameters: specs, MIDI, OSC, actions...
categories:: GUI, Conductor, External Control>MIDI, External Control>OSC
related:: Classes/CVCenter, Classes/CV, Classes/CVWidget, Classes/CVWidgetKnob, Classes/CVWidget2D, Classes/CV, Classes/CCResponder, Classes/OSCresponderNode, Classes/SimpleController, Classes/ControlSpec

DESCRIPTION::
The interface defined within code::CVWidget:: resp. its subclasses code::CVWidgetKnob:: and code::CVWidget2D:: defines a number of methods that can also be triggered via their GUI. However these GUIs don't offer enough space to display all options a widget incorporates. Therefore each widget has an inbuilt editor which is defined within CVWidgetEditor.
note::CVWidgetEditor is not supposed to be used directly. Rather editors should always be instantiated from within the widget it belongs to.::


CLASSMETHODS::

private:: allEditors
METHOD:: new
Opens a new editor for the widget specified by code::widgetName::


argument:: widget
the widget-object: either a code::CVWidgetKnob:: or a code::CVWidget2D::

argument:: widgetName
a code::Symbol::, reflecting the widget's name

argument:: tab
an code::Integer:: specifying which tab of the editor shall be focused when the editor opens. Each editor contains 4 tabs ( see also code::TabbedView::): "Specs", "MIDI", "OSC" and "Action", each addressed by an integer value from code::0:: to code::3::

argument:: slot
if the widget is a code::CVWidget2D:: this parameter is necessary to reflect the widget's slot for which the editor will be created.

returns:: a code::CVWidgetEditor::


INSTANCEMETHODS::
subsection:: Common GUI properties
METHOD:: window
The editor's window

returns:: a code::Window::

METHOD:: tabs
The editor's tabs, defined by a code::TabbedView:: 

returns:: a code::TabbedView::

subsection:: The "Specs"-tab

METHOD:: specField
A code::TextField:: for manually entering a code::ControlSpec::. Values can be:
definitionList::
## a code::Symbol:: || identifying an existing code::ControlSpec:: - e.g. code::\freq:: will become code::ControlSpec(20, 20000, 'exp', 0, 440, " Hz")::
## an code::Array:: || values can be literals if no calculations have to be processed on them - e.g.: code::#[1, 10]:: will become code::ControlSpec(1, 10, 'linear', 0.0, 1, "")::. If calculations are happening within the string - e.g.: code::[5*3, 30]:: the array strong::must not:: be prefixed with code::#::.
## a valid code::ControlSpec:: || e.g. code::ControlSpec(-1, 1, 'linear', 0.0, 0, "")::
::

returns:: a code::TextField::

METHOD:: specsList
A code::PopUpMenu:: displaying the list of predefined code::ControlSpec::s. 

returns:: a code::PopUpMenu::

METHOD:: specsListSpecs
The internal list of code::ControlSpec::s from which the user may choose in link::#-specsList::. This is strong::not:: identical with the list that is displayed as code::specsList.items:: contains the spec-names as well.

returns:: a code::List::

subsection:: The "MIDI"-tab

METHOD:: midiModeSelect
A code::PopUpMenu:: allowing the user to selct the link::Classes/CVWidget#-setMidiMode#midiMode:: - either code::0-127:: (default, midiMode: code::0::) or code::+/-:: (in-/decremental, midiMode: code::1::).

returns:: a code::PopUpMenu::

METHOD:: midiMeanNB
A code::NumberBox:: allowing the user to set the value for link::Classes/CVCenter#-setMidiMean#midiMean::

returns:: a code::NumberBox::

METHOD:: softWithinNB
A code::NumberBox:: allowing the user to set the value for link::Classes/CVCenter#-setSoftWithin#softWithin::

returns:: a code::NumberBox::

METHOD:: ctrlButtonBankField
A code::TextField:: allowing the user to set the value for link::Classes/CVCenter#-setCtrlButtonBank#ctrlButtonBank::

returns:: a code::TextField::

METHOD:: midiResolutionNB
A code::NumberBox:: allowing the user to set the value for link::Classes/CVCenter#-setMidiResolution#midiResolution::

returns:: a code::NumberBox::

METHOD:: midiLearnBut
A code::Button:: allowing the user to either trigger the link::Classes/CCResponder#-learn#MIDI-learn:: functionality ("L") or, if a value has been set in link::#-midiSrcField:: and/or link::#-midiChanField:: and/or link::#-midiCtrlField:: set up a code::CCResponder:: with the specified values ("C").

returns:: a code::TextField::

METHOD:: midiSrcField
A code::TextField:: for setting resp. displaying the ID under which the MIDI-device has been registered in SuperCollider.

returns:: a code::TextField::

METHOD:: midiChanField
A code::TextField:: for setting resp. displaying a MIDI-channel.

returns:: a code::TextField::

METHOD:: midiCtrlField
A code::TextField:: for setting resp. displaying a controller-number.

returns:: a code::TextField::

subsection:: The "OSC"-tab

METHOD:: calibBut
(describe method here)

returns:: (returnvalue)

METHOD:: calibNumBoxes
(describe method here)

returns:: (returnvalue)

METHOD:: ipField
(describe method here)

returns:: (returnvalue)

METHOD:: portField
(describe method here)

returns:: (returnvalue)

METHOD:: nameField
(describe method here)

returns:: (returnvalue)

METHOD:: indexField
(describe method here)

returns:: (returnvalue)

METHOD:: inputConstraintLoField
(describe method here)

returns:: (returnvalue)

METHOD:: inputConstraintHiField
(describe method here)

returns:: (returnvalue)

METHOD:: alwaysPosField
(describe method here)

returns:: (returnvalue)

METHOD:: mappingSelect
(describe method here)

returns:: (returnvalue)

METHOD:: connectorBut
(describe method here)

returns:: (returnvalue)

METHOD:: actionsList
(describe method here)

returns:: (returnvalue)

METHOD:: init
(describe method here)

argument:: widget
(describe argument here)

argument:: widgetName
(describe argument here)

argument:: tab
(describe argument here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: front
(describe method here)

argument:: tab
(describe argument here)

returns:: (returnvalue)

METHOD:: close
(describe method here)

argument:: slot
(describe argument here)

returns:: (returnvalue)

METHOD:: isClosed
(describe method here)

returns:: (returnvalue)

METHOD:: amendActionsList
(describe method here)

argument:: widget
(describe argument here)

argument:: addRemove
(describe argument here)

argument:: name
(describe argument here)

argument:: action
(describe argument here)

argument:: slot
(describe argument here)

argument:: active
(describe argument here)

returns:: (returnvalue)


EXAMPLES::

code::
(some example code)
::

